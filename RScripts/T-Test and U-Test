#-------------------------------------------------------------------------------------------------------------
                                   # Cleaning the workspace
#-------------------------------------------------------------------------------------------------------------

cat("\f")       # Clear old outputs
rm(list=ls())   # Clear all variaables

#-------------------------------------------------------------------------------------------------------------
                                 # HEADER OF THE SOFTWARE OUTPUT
#-------------------------------------------------------------------------------------------------------------

sourceAuthor  <-  "TEAM"
sourceDate    <-  "30.04.2020"
sourceVersion <-  "1.0.1"

##Info about the software:

print(paste("Info"), quote = FALSE)
print(paste("Date", sourceDate), quote = FALSE)
print(paste("Version", sourceVersion), quote = FALSE)
print(paste("Author", sourceAuthor), quote = FALSE)
print("T-Test and Mann-Whitney U-Test", quote = FALSE )


#-------------------------------------------------------------------------------------------------------------
                                         # {Install Packages}
                    #While the first run certain subpackages have to be installed
#-------------------------------------------------------------------------------------------------------------

# Package for package administration:
if(!require("miniCRAN")) install.packages("miniCRAN") 

# Package for a layout theme for the violone plots:
if(!require("dplyr")) install.packages("dplyr") 

# Add the associated libraries to the programm
library("miniCRAN")
library("dplyr")

# *************************************************************************************************************
# *************************************************************************************************************
# *************************************************************************************************************




#-------------------------------------------------------------------------------------------------------------
                                              # MAIN
#-------------------------------------------------------------------------------------------------------------


# Declaration of parameters:
SEPARATOR = ";"  # Separator within the csv.-files


# Output path:
outputname = "Resultt_of_T&U_test.csv"


# Define start and end row of each group

start_Col_Group_X  <- 1 # Start Group 1
end_Col_Group_X    <- 33 # End Group 1
start_Col_Group_Y  <- 34 # Start Group 2
end_Col_Group_Y    <- 66 # End Group 2


                              #------------------------------------------------
                              # STEP: 1. Gets the matrix
                              #------------------------------------------------


# Start Filechoose
print(paste("Please select Input CSV", " The different samples in columns and the measured variables in the rows."), quote = FALSE)
fname <- file.choose()  #Metaprotein.csv
matrix <- read.csv(fname, sep=SEPARATOR,row.names=1) 


                              
                              #--------------------------------------------------
                              # Methods: 2. Calculates U-Test and T-Test
                              #--------------------------------------------------


# Create new output vectors for the results:

EMPTY_First                                            <-  (rep("",nrow(matrix))) # + 1
pValue_TTest                                     <-  (rep(0, nrow(matrix))) # + 2
BonferoniCorrection_TTest                        <-  (rep(0, nrow(matrix))) # + 3
BenjaminHochbergerCorrection_TTest               <-  (rep(0, nrow(matrix))) # + 4
EMPTY_Second                                     <-  (rep('', nrow(matrix)))# + 5
pValue_UTest                                     <-  (rep(0, nrow(matrix))) # + 6
BonferoniCorrection_UTest                        <-  (rep(0, nrow(matrix))) # + 7
BenjaminHochbergerCorrection_UTest               <-  (rep(0, nrow(matrix))) # + 8
EMPTY_Third                                      <-  (rep('', nrow(matrix)))# + 9
AverageGroup1                                    <-  (rep(0, nrow(matrix))) # + 10
AverageGroup2                                    <-  (rep(0, nrow(matrix))) # + 11
AverageGroup1div2                                <-  (rep(0, nrow(matrix))) # + 12
Log2_AverageGroup1div2                           <-  (rep(0, nrow(matrix))) # + 13

# Combined it to the output matrix:

newMatrix <-  cbind(  matrix, EMPTY_First,pValue_TTest, BonferoniCorrection_TTest, BenjaminHochbergerCorrection_TTest,
                      
                      EMPTY_Second, pValue_UTest, BonferoniCorrection_UTest, BenjaminHochbergerCorrection_UTest,
                      
                      EMPTY_Third, AverageGroup1, AverageGroup2, AverageGroup1div2, Log2_AverageGroup1div2 )


# Calculate the anova for all variables: 
for (i in 1:nrow(matrix)) {
  #Average of Groups: 
  
  newMatrix[i,ncol(matrix) + 10]    <- mean(as.numeric( matrix[i, start_Col_Group_X : end_Col_Group_X] ))
  newMatrix[i,ncol(matrix) + 11]    <- mean(as.numeric( matrix[i, start_Col_Group_Y : end_Col_Group_Y] ))
  newMatrix[i,ncol(matrix) + 12]    <- mean( as.numeric( matrix[i, start_Col_Group_X : end_Col_Group_X] ))/
                                       mean(as.numeric( matrix[i, start_Col_Group_Y : end_Col_Group_Y] ))
  
  
  # Calculation of P-Value for TTest and U-Test
  
  newMatrix[i,ncol(matrix)+ 2]      <- t.test(as.numeric(matrix[i,start_Col_Group_X:end_Col_Group_X]),
                                              as.numeric(matrix[i,start_Col_Group_Y:end_Col_Group_Y]),
                                              alternative = c("two.sided"), paired = FALSE, 
                                              var.equal = FALSE,conf.level = 0.95)$p.value
  
  
  
  newMatrix[i,ncol(matrix)+ 6]      <- wilcox.test(as.numeric(matrix[i,start_Col_Group_X:end_Col_Group_X]),
                                                   as.numeric(matrix[i,start_Col_Group_Y:end_Col_Group_Y]),
                                                   alternative = c("two.sided"), paired = FALSE, 
                                                   var.equal = FALSE,conf.level = 0.95)$p.value
    
  newMatrix[i,ncol(matrix) + 13]    <-  log2(newMatrix[i,ncol(matrix) + 12])
}


## Bonferroni and Benjamin-Hochberger Corrections for T-Test:

#Save P-Value of TTest in 'p':
p <- newMatrix[1:nrow(matrix),ncol(matrix)+ 2] 

#apply Bonferroni correction:
newMatrix[1:nrow(matrix),ncol(matrix)+ 3]   <- p.adjust(p,method = "bonferroni", n = length(p))   
#apply Benjamin-Hochberger correction:
newMatrix[1:nrow(matrix),ncol(matrix)+ 4]   <-  p.adjust(p, method = "BH", n = length(p))




## Bonferroni and Benjamin-Hochberger Corrections for U-Test:

#Save P-Value of UTest in 'p':
p <- newMatrix[1:nrow(matrix),ncol(matrix)+ 6]

#apply Bonferroni correction:
newMatrix[1:nrow(matrix),ncol(matrix)+ 7]   <- p.adjust(p,method = "bonferroni", n = length(p))   
#apply Benjamin-Hochberger correction:
newMatrix[1:nrow(matrix),ncol(matrix)+ 8]   <-  p.adjust(p, method = "BH", n = length(p))



                            #--------------------------------------------------
                            # STEP: 3. Export the results
                            #--------------------------------------------------
 

write.table(newMatrix, file = paste(outputname), append = FALSE, quote = TRUE, sep = ",",
            eol = "\n", na = "NA", dec = ".", row.names = TRUE,
            col.names = NA, qmethod = c("escape", "double"),
            fileEncoding = "")
 

                            #--------------------------------------------------
                            # Methods: 3. Finish
                            #--------------------------------------------------



#--------------------------------------------------
# Visualization
#--------------------------------------------------


# Package require for DataFrame manuplulation:

if(!require("tidyr")) install.packages("tidyr")
if(!require("ggplot2")) install.packages("ggplot2")
if(!require("ggpubr")) install.packages("ggpubr")

#Load Libraries/packages:
library(tidyr)
library(ggplot2)
library(ggpubr)



## PValues comaprison w.r.t average ratio:

#combining Two attributes for visualization
useMatrix <- gather(data=newMatrix,
                    key = 'TestNames',
                    value = 'P_Value',
                    pValue_TTest,pValue_UTest)

#Box_plot for camparison of TTest and Mann-Whitney U test:

ggboxplot(useMatrix, x = "TestNames", y = "P_Value", 
          color = "TestNames", palette = c("#00AFBB", "#E7B800"),
          ylab = "P_Value", xlab = "TestNames")

#Scatter_plot for comaprison of TTest and Mann-Whitney U test:

ggplot(data=newMatrix)+geom_point(aes(x=Log2_AverageGroup1div2,y=pValue_TTest,color='TTest'))+
geom_point(aes(x=Log2_AverageGroup1div2,y=pValue_UTest,color='UTest'))+xlab('Log2(Group1avg/Group2avg)')+
ylab('P_Values')+labs(colour='Test_Type')
        
       
